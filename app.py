# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aX1WwaiB5I5wOx207hy-cNsXKnd1Ylvx
"""

import streamlit as st
import numpy as np
import tensorflow as tf

# Load the saved Keras model (.h5)
model = tf.keras.models.load_model('dnn_model.h5')

st.title("Breast Cancer Prediction App")

st.write("Enter the features below to predict if tumor is malignant or benign:")

# Create columns to make UI cleaner
col1, col2, col3 = st.columns(3)

# Create input fields grouped for better layout
with col1:
    radius_mean = st.number_input("Radius Mean", min_value=0.0, value=14.0)
    texture_mean = st.number_input("Texture Mean", min_value=0.0, value=20.0)
    perimeter_mean = st.number_input("Perimeter Mean", min_value=0.0, value=80.0)
    area_mean = st.number_input("Area Mean", min_value=0.0, value=500.0)
    smoothness_mean = st.number_input("Smoothness Mean", min_value=0.0, value=0.1)
    compactness_mean = st.number_input("Compactness Mean", min_value=0.0, value=0.2)
    concavity_mean = st.number_input("Concavity Mean", min_value=0.0, value=0.1)
    concave_points_mean = st.number_input("Concave Points Mean", min_value=0.0, value=0.1)
    symmetry_mean = st.number_input("Symmetry Mean", min_value=0.0, value=0.2)
    fractal_dimension_mean = st.number_input("Fractal Dimension Mean", min_value=0.0, value=0.06)

with col2:
    radius_se = st.number_input("Radius SE", min_value=0.0, value=0.5)
    texture_se = st.number_input("Texture SE", min_value=0.0, value=1.0)
    perimeter_se = st.number_input("Perimeter SE", min_value=0.0, value=3.0)
    area_se = st.number_input("Area SE", min_value=0.0, value=30.0)
    smoothness_se = st.number_input("Smoothness SE", min_value=0.0, value=0.005)
    compactness_se = st.number_input("Compactness SE", min_value=0.0, value=0.02)
    concavity_se = st.number_input("Concavity SE", min_value=0.0, value=0.02)
    concave_points_se = st.number_input("Concave Points SE", min_value=0.0, value=0.01)
    symmetry_se = st.number_input("Symmetry SE", min_value=0.0, value=0.02)
    fractal_dimension_se = st.number_input("Fractal Dimension SE", min_value=0.0, value=0.003)

with col3:
    radius_worst = st.number_input("Radius Worst", min_value=0.0, value=15.0)
    texture_worst = st.number_input("Texture Worst", min_value=0.0, value=20.0)
    perimeter_worst = st.number_input("Perimeter Worst", min_value=0.0, value=100.0)
    area_worst = st.number_input("Area Worst", min_value=0.0, value=800.0)
    smoothness_worst = st.number_input("Smoothness Worst", min_value=0.0, value=0.1)
    compactness_worst = st.number_input("Compactness Worst", min_value=0.0, value=0.3)
    concavity_worst = st.number_input("Concavity Worst", min_value=0.0, value=0.3)
    concave_points_worst = st.number_input("Concave Points Worst", min_value=0.0, value=0.15)
    symmetry_worst = st.number_input("Symmetry Worst", min_value=0.0, value=0.3)
    fractal_dimension_worst = st.number_input("Fractal Dimension Worst", min_value=0.0, value=0.08)

# Collect all features into a numpy array
input_data = np.array([[radius_mean, texture_mean, perimeter_mean, area_mean, smoothness_mean,
                        compactness_mean, concavity_mean, concave_points_mean, symmetry_mean, fractal_dimension_mean,
                        radius_se, texture_se, perimeter_se, area_se, smoothness_se,
                        compactness_se, concavity_se, concave_points_se, symmetry_se, fractal_dimension_se,
                        radius_worst, texture_worst, perimeter_worst, area_worst, smoothness_worst,
                        compactness_worst, concavity_worst, concave_points_worst, symmetry_worst, fractal_dimension_worst]])

if st.button("Predict"):
    # input_data = input_data.reshape(1, -1)  # Reshape input to (1, 30) -- no np.array() needed
    # prediction = model.predict(input_data)
    input_data = np.pad(input_data, ((0, 0), (0, 2)))  # Add 2 dummy features (0s)
    prediction = model.predict(input_data)
    pred_label = (prediction[0] > 0.5).astype(int) if prediction.shape[-1] == 1 else np.argmax(prediction, axis=1)[0]
    result = "Malignant" if pred_label == 1 else "Benign"
    st.write(f"Prediction: **{result}**")



import h5py

with h5py.File('dnn_model.h5', 'r') as f:
    print(list(f.keys()))
